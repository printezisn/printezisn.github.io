---
import type { BreadcrumbPage } from '@global-types/breadcrumb';

interface Props {
  title: string;
  description: string;
  path: string;
  image?: string;
  favicon?: string;
  themeColor?: string;
  lang?: string;
  bodyClass?: string;
  breadcrumbList: BreadcrumbPage[];
  index?: boolean;
  lastUpdateTime: Date;
  nextPage?: string;
  prevPage?: string;
}

const defaultImage = '/logo.jpg';
const defaultFavicon = '/favicon.png';
const defaultThemeColor = '#0e141b';

const {
  title,
  description,
  path,
  image = defaultImage,
  favicon = defaultFavicon,
  themeColor = defaultThemeColor,
  lang = 'en',
  bodyClass = '',
  breadcrumbList,
  index = true,
  lastUpdateTime,
  nextPage,
  prevPage,
} = Astro.props;

const canonicalUrl = new URL(path, Astro.site);
const imageUrl = new URL(image, Astro.site);

const breadcrumbStructuredData = {
  '@context': 'https://schema.org',
  '@type': 'BreadcrumbList',
  itemListElement: breadcrumbList.map((item, i) => ({
    '@type': 'ListItem',
    position: i + 1,
    name: item.name,
    item: new URL(item.url, Astro.site),
  })),
};
const breadcrumbStructuredDataString = `<script type="application/ld+json">${JSON.stringify(breadcrumbStructuredData)}</script>`;
---

<!doctype html>
<html lang={lang}>
  <head>
    <!-- Global Metadata -->
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    {
      favicon.endsWith('.svg') ? (
        <link rel="icon" type="image/svg+xml" href={favicon} />
      ) : (
        <link rel="icon" href={favicon} />
      )
    }
    <meta name="generator" content={Astro.generator} />

    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalUrl} />
    {prevPage && <link rel="prev" href={new URL(prevPage, Astro.site)} />}
    {nextPage && <link rel="next" href={new URL(nextPage, Astro.site)} />}

    <!-- Sitemap -->
    <link rel="sitemap" type="application/xml" href="/sitemap.xml" />

    <!-- Primary Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    {!index && <meta name="robots" content="noindex" />}

    <!-- Preloads -->
    <slot name="preloads" />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalUrl} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={imageUrl} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalUrl} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={imageUrl} />

    <!-- PWA -->
    <meta name="theme-color" content={themeColor} />
    <link rel="manifest" href="/manifest/manifest.webmanifest" />

    <!-- Structured Data -->
    <Fragment set:html={breadcrumbStructuredDataString} />
    <slot name="structured-data" />

    <!-- Scripts -->
    <slot name="scripts" />
  </head>
  <body
    class={bodyClass}
    data-last-update-time={lastUpdateTime.toISOString().slice(0, 10)}
  >
    <slot />
    {
      import.meta.env.PROD && (
        <script async src="https://scripts.simpleanalyticscdn.com/latest.js" />
      )
    }
  </body>
</html>
